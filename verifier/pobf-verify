#!/usr/bin/env python3

import subprocess
import coloredlogs
import logging
import sys
import json
import os
import argparse
from typing import List


def compiler_verify(cargo_args: list = []):

    def analyze_compiler_message(msg: dict):
        compiler_enforcement = \
            {'unsafe': ('vio-unsafe', 'PoBF forbids unsafe code in this souce file, please try to remove it.'),
             'but its trait bounds were not satisfied': ('vio-typestate', 'The code may try to call a function which is not available in this state.'),
             'method not found in': ('vio-typestate', 'The code may try to call a function which is not impplemented for this type.'),
             'private field': ('vio-private', 'The code may try to access a private filed which can contain secret information.'),
             'items from traits can only be used': ('vio-private', 'The code may try to access a private trait which deals with secret.'), 
             'unresolved import': ('vio-ocall', 'The code may try to import a module which is not permitted to use in this enclave.'),
             'private module': ('vio-ocall', 'The code may try to import a module which is not permitted to use in this enclave.'),}

        details = msg['message']['rendered']
        logging.debug(details)

        error_captured = False
        for identifier, (vio_type,
                         explaination) in compiler_enforcement.items():

            if identifier in details:
                error_captured = True
                logging.error(explaination)
                logging.warning(
                    'The detailed explaination of this error type [%s] can be found in the document.',
                    vio_type)

        if 'aborting due to' in details:
            return

        if error_captured:
            print(msg['message']['rendered'])

    logging.info('Compiler verification started.')

    rustc_verify_command = "cargo build --message-format=json".split()
    for f in cargo_args:
        rustc_verify_command.append(f)

    rustc_output = subprocess.run(rustc_verify_command,
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.DEVNULL)
    compiler_outputs = rustc_output.stdout.decode("utf-8").split('\n')
    compiler_outputs_serialized = []

    for i in range(len(compiler_outputs) - 1):
        # logging.debug(compiler_output[i])
        compiler_outputs_serialized.append(json.loads(compiler_outputs[i]))

    logging.debug(len(compiler_outputs))

    for o in compiler_outputs_serialized:
        if o['reason'] == 'compiler-message':
            analyze_compiler_message(o)
        if o['reason'] == 'build-finished':
            return o["success"]


def mirai_verify():

    def analyze_mirai_message(msg: dict):
        mirai_enforcement = \
            {'warning: possible false verification condition': (
                'vio-ocall', 'PoBF only allows const printing in the enclave.')}

        details = msg['message']['rendered']
        logging.debug(details)

        error_captured = False
        for identifier, (vio_type, explaination) in mirai_enforcement.items():

            if identifier in details:
                error_captured = True
                logging.error(explaination)
                logging.warning(
                    'The detailed explaination of this error type [%s] can be found in the document.',
                    vio_type)

        if error_captured:
            print(msg['message']['rendered'])

    # analyze the MIRAI output
    mirai_verify_command = "cargo mirai --message-format=json".split()
    mirai_output = subprocess.run(mirai_verify_command,
                                  stdout=subprocess.PIPE,
                                  stderr=subprocess.DEVNULL)
    mirai_output = mirai_output.stdout.decode("utf-8").split('\n')

    mirai_outputs_serialized = []
    for i in range(len(mirai_output) - 1):
        mirai_outputs_serialized.append(json.loads(mirai_output[i]))

    for o in mirai_outputs_serialized:
        if o['reason'] == 'compiler-message':
            analyze_mirai_message(o)


def src_verify(unsafe_allowed: list = []):

    def check_unsafe(path: str) -> bool:
        logging.info("- analyzing file: %s...", path)

        if list(filter(lambda x: x in path, unsafe_allowed)):
            logging.warning(
                "  + unsafe code not forbidden in %s, and this is allowed.",
                path)
            return True

        with open(path, 'r') as f:
            if list(
                    filter(lambda l: l.startswith('#![forbid(unsafe_code)]'),
                           f.readlines())):
                logging.info("  + unsafe code fobidden in %s, clear.", path)
                return True
            else:
                logging.error(
                    "  + unsafe code not forbidden in %s, please add `#![forbid(unsafe_code)]` in this file!",
                    path)
                return False

    logging.info("checking unsafe code...")

    for root, _, files in os.walk("./src", topdown=False):
        for name in files:
            logging.debug(os.path.join(root, name))
            filename = os.path.join(root, name)
            check_unsafe(filename)


def format():
    fmt_command = "cargo fmt".split()
    subprocess.run(fmt_command, stderr=subprocess.DEVNULL)


def clean():
    clean_command = "cargo clean".split()
    subprocess.run(clean_command, stderr=subprocess.DEVNULL)


def build():
    logging.info("building PoBF binary...")
    build_command = "make -C ..".split()
    subprocess.run(build_command, stderr=subprocess.DEVNULL)


def testflight() -> List[str]:
    logging.info("trying to test run the PoBF binary...")
    wd = os.getcwd()
    os.chdir("../bin")
    run_command = "./app cal ../key.bin ../data.enc".split()
    run_output = subprocess.run(run_command,
                                stdout=subprocess.PIPE,
                                stderr=subprocess.DEVNULL)
    os.chdir(wd)
    user_func_prints = []

    run_output = run_output.stdout.decode("utf-8").split('\n')
    for i in range(len(run_output)):
        if run_output[i] == "[user function output]":
            user_func_prints.append(run_output[i + 1])

    return user_func_prints


def instrument(user_func_prints: List[str]):
    source_code_path = "./src/userfunc.rs"
    junk_chars = '();'
    numerics = {}
    for line in user_func_prints:
        for word in line.split():
            if word.isnumeric():
                numerics[line] = word

    source_code_lines = []
    instrument_source_code_lines = []
    with open(source_code_path, 'r') as f:
        source_code_lines = f.readlines()

    if len(numerics) == 0:
        return

    for line in source_code_lines:
        if line.startswith("//"):
            # handle spaces
            instrument_source_code_lines.append(line)
            continue
        for (string, n_const_str) in numerics.items():
            if string.replace(n_const_str, "{}") in line:
                dirty_line = line
                for c in junk_chars:
                    dirty_line = dirty_line.replace(c, '')
                statement = "verify!(%s == %s);\n" % (dirty_line.split()[-1],
                                                      n_const_str)
                instrument_source_code_lines.append(statement)
        instrument_source_code_lines.append(line)

    with open(source_code_path, 'w') as f:
        f.writelines(instrument_source_code_lines)


def main():

    # Invoked by Cargo
    if "pobf-verify" in sys.argv[1]:
        sys.argv.pop(0)

    # option: src_verifier / mirai_verifier / compiler_verifier
    verification_matrix = {
        'no_leakage': (True, True, False),
        'no_residue': (True, False, True),
        'all': (True, True, True)
    }

    parser = argparse.ArgumentParser(description='PoBF Verfier')
    parser.add_argument('--property',
                        choices=verification_matrix.keys(),
                        default='all',
                        help='the property to be verified')

    parser.add_argument(
        '--allowed-unsafe',
        nargs='*',
        default=[],
        help='source code filename(s) which are allowed to contain unsafe code'
    )

    parser.add_argument('--log-level',
                        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
                        default='INFO',
                        help='the log level')

    parser.add_argument('arguments',
                        nargs=argparse.REMAINDER,
                        help='arguments for cargo build')

    args = parser.parse_args()

    log_format = '%(levelname)s %(message)s'
    coloredlogs.install(level=args.log_level, fmt=log_format)
    logging.basicConfig(stream=sys.stderr, level=logging.DEBUG)

    (src_v, mirai_v, compiler_v) = verification_matrix[args.property]

    if len(args.arguments) > 1 and args.arguments[0] == '--':
        cargo_args = args.arguments[1:]
    else:
        cargo_args = []

    rv = 0
    if src_v:
        logging.info("checking if the source code forbids `unsafe` ...\n")
        src_verify(args.allowed_unsafe)

    if mirai_v:
        build()
        prints = testflight()
        instrument(prints)
        format()
        clean()
        logging.info("\nchecking possible leakage through OCALLs...\n")
        if mirai_verify():
            logging.info(
                "`no_leakage` verification passed: no leakage found by MIRAI.\n"
            )
        else:
            logging.error(
                "`no_leakage` verification failed: leakage(s) found by MIRAI.\n"
            )
            rv = 1

    if compiler_v:
        clean()
        logging.info("\nchecking possible secret residue...\n")
        if compiler_verify(cargo_args):
            logging.info(
                "`no_residue` verification passed: no secret residue found by rustc.\n"
            )
        else:
            logging.error(
                "`no_residue` verification failed: secret(s) residue found by rustc."
            )
            rv = 1

    return rv


if __name__ == "__main__":
    main()
